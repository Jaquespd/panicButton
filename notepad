#DEFINE BOTAO_PRESSIONADO 0
#DEFINE BOTAO_NAO_PRESSIONADO 1
#DEFINE PINO_BOTAO 14
#DEFINE TEMPO_TIMER_AVISO 2000

int pinBotao = PINO_BOTAO;
bool estadoAnteriorBotao = BOTAO_NAO_PRESSIONADO;
bool estadoAtualBotao = BOTAO_NAO_PRESSIONADO;
int numeroVezesBotaoPressionado = 0;
int tempoTimerAviso = TEMPO_TIMER_AVISO;

SimpleTimer timer;
int wd_timer_id;

void loop {
    timer.run();
}

bool botaoPressionado (int pinBotao) {
    int _pinBotao = pinBotao;
    estadoAtualBotao = digitalRead (_pinBotao);
    if (estadoAtualBotao == BOTAO_PRESSIONADO && estadoAnteriorBotao == BOTAO_NAO_PRESSIONADO) {
        contadorBotaoPressionado++;
        estadoAnteriorBotao = BOTAO_PRESSIONADO;
        return true;
    } else if (estadoAtualBotao == BOTAO_NAO_PRESSIONADO) {
        estadoAnteriorBotao = BOTAO_NAO_PRESSIONADO;
        return false;
    } else if (estadoAtualBotao == BOTAO_PRESSIONADO && estadoAnteriorBotao == BOTAO_PRESSIONADO) {
        //rotina para identificar botao pressionado direto (falso positivo)
        return false;
    }
    Serial.println ("erro! Possivel problema na funcao botaoPressionado().");
    return false;
}

void contagemBotaoPressionado (bool botaoPressionado) {
    bool _botaoPressionado = botaoPressionado;
    if (!_botaoPressionado) {
        return;
    } else if (_botaoPressionado) {
        numeroVezesBotaoPressionado++;
    }
    if (numeroVezesBotaoPressionado == 0) {
        Serial.println("erro1! Possivel problema na funcao contagemBotaoPressionado()");
    } else if (numeroVezesBotaoPressionado == 1) {
        // codigo para 1x botao.
        enviarServidor_timer_id = timer.setInterval(tempoTimerAviso, enviarServidor);
        return;
    } else if (numeroVezesBotaoPressionado == 2) {
        // codigo para 2x botao.
        timer.restartTimer(enviarServidor_timer_id);
        return;
    } else if (numeroVezesBotaoPressionado == 3) {
        // codigo para 3x botao.
        return;
    } else if (numeroVezesBotaoPressionado >= 4) {
        Serial.println("aviso! Botao pressionado mais de 3x");
        // chamar mesmo codigo para 3x.
        return;
    }
    Serial.println("erro2! Possivel problema na funcao contagemBotaoPressionado()");
}

void enviarServidor () {
    switch (numeroVezesBotaoPressionado) {
        case 1:
        // codigo para enviar alerta nivel 1
        // set string value
        Firebase.setString("message", "hello world");
        // handle error
        if (Firebase.failed()) {
            Serial.print("setting /message 1x failed:");
            Serial.println(Firebase.error());  
            return;
        }
        numeroVezesBotaoPressionado = 0;
        break;
        case 2:
        // codigo para enviar alerta nivel 2
        // set string value
        Firebase.setString("message", "hello world");
        // handle error
        if (Firebase.failed()) {
            Serial.print("setting /message 2x failed:");
            Serial.println(Firebase.error());  
            return;
        }
        numeroVezesBotaoPressionado = 0;
        break;
        case 3:
        // codigo para enviar alerta nivel 3
        // set string value
        Firebase.setString("message", "hello world");
        // handle error
        if (Firebase.failed()) {
            Serial.print("setting /message 3x failed:");
            Serial.println(Firebase.error());  
            return;
        }
        numeroVezesBotaoPressionado = 0;
        break;
        default:
        Serial.println("erro! Possivel problema na funcao enviarServidor()");
        numeroVezesBotaoPressionado = 0;
    }
}
